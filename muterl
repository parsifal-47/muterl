#!/usr/bin/env python3
"""muterl
Usage:
    muterl [--mutation=<number>]
    muterl --mutation-count
    muterl --check-parsing
    muterl -h | --help
Options:
    --mutation <number> Create particular mutation
    -h, --help       Show this help
"""

import re
import os
import glob
import shutil
import random
import docopt
import subprocess
import muterl_lex
import muterl_logic
import muterl_clause
import muterl_constants
from parsimonious.grammar import Grammar
import parsimonious.exceptions
from functools import reduce

default_config = {'files': "src/*.erl",
                  'mutants': 100,
                  'runner': 'rebar3 eunit',
                  'report': 'muterl.report',
                  'backup_folder': 'muterl.backup'}

mutations = {'remove_clause': {'count': muterl_clause.clause_remove_count,
                               'mutate': muterl_clause.clause_remove},
             'logic_inverse': {'count': muterl_logic.count,
                               'mutate': muterl_logic.inverse},
             'constant_change': {'count': muterl_constants.count,
                                 'mutate': muterl_constants.change}}

def reduce_config(ast):
    if ast.expr_name == "number":
        return [int(ast.text)]
    elif ast.expr_name == "string":
        return [ast.text[1:-1]] # "something"
    elif ast.expr_name == "atom":
        return [ast.text]

    sub = reduce(lambda a, x: a + reduce_config(x), ast.children, [])
    if ast.expr_name == "term":
        return [tuple(sub)]
    elif ast.expr_name == "entry":
        return dict(sub)

    return sub

def read_config(file = 'muterl.config'):
    if not os.path.isfile(file):
        return default_config

    config_grammar = Grammar("""\
    entry = _ (term "." _)*
    term = "{" _ atom _ "," _ (string / number / atom) _ "}"
    atom = ~"[a-z][0-9a-zA-Z_]*"
    string = '"' ~r'(\\\\"|[^"])*' '"'
    number = ~"[0-9]+"
    _ = ~r"\s*" (~r"%[^\\r\\n]*\s*")*
    """)
    with open(file) as config:
        default_config.update(
            reduce_config(config_grammar.parse(config.read())))
        return default_config

def backup(folder, files):
    for file in files:
        if not os.path.exists(os.path.dirname(folder + "/" + file)):
            os.makedirs(os.path.dirname(folder + "/" + file))
        shutil.copyfile(file, folder + "/" + file)

def restore(folder, file):
    shutil.copyfile(folder + "/" + file, file)

def contents(filename):
    with open(filename) as file:
        return file.read()

def mutation(number, files, asts, mutation_matrix, runner,
            backup_folder, report, simulate = False):
    if not simulate:
        print("Running mutation #{0}".format(number))
    for mutation_name in mutation_matrix:
        for i in range(0, len(files)):
            if number < mutation_matrix[mutation_name][i]:
                mutations[mutation_name]['mutate'](number, asts[i], files[i])
                if not simulate:
                    if subprocess.call(runner, shell=True) == 0:
                        with open(report, 'a') as file:
                            file.write('Mutant #{0} survived, affected file: {1}\n'.format(number, files[i]))
                            file.write(str(subprocess.check_output("diff -c " +
                                       backup_folder + "/" + files[i] + " " +
                                       files[i] + "; true", shell = True), 'utf-8'))
                    restore(backup_folder, files[i])
                return
            else:
                number = number - mutation_matrix[mutation_name][i]

def filter_node(regexp, direction, node):
    if node.expr_name != "function":
        return True
    rr = regexp.match(node.children[0].children[0].children[0].text)
    if (rr is None and direction) or (rr is not None and direction == False):
        return False
    return True

def filter_fun(regexp, direction, ast):
    if ast.children:
        ast.children = filter(lambda x: filter_node(regexp, direction, x),
            ast.children)
        list(map(lambda x: filter_fun(regexp, direction, x), ast.children))

def main():
    args = docopt.docopt(__doc__, version='0.1.0')
    config = read_config()

    if (not args['--mutation-count']) and (not args['--check-parsing']):
        if subprocess.call(config["runner"], shell=True) != 0:
            print("Initial test check failed, exiting")
            exit(1)

    files = glob.glob(config["files"])
    backup(config["backup_folder"], files)
    asts = list(map(muterl_lex.lex, zip(files, map(contents, files))))

    if "functions" in config:
        list(map(lambda x: filter_fun(re.compile(config["functions"]), True, x), asts))

    if "functions_skip" in config:
        list(map(lambda x: filter_fun(re.compile(config["functions_skip"]), False, x), asts))

    for name in config:
        if name in mutations and config[name] == "disable":
            del mutations[name]

    mutation_matrix = {}
    all_mutants = 0
    for name in mutations:
        mutation_matrix[name] = list(map(lambda x: mutations[name]['count'](x) if x is not None else 0, asts))
        all_mutants = all_mutants + sum(mutation_matrix[name])

    if args['--check-parsing']:
        exit(2 if any(map(lambda x:x is None, asts)) or all_mutants == 0 else 0)

    if args['--mutation-count']:
        print(str(all_mutants))
        exit()

    if args['--mutation'] is not None:
        print("All mutations count " + str(all_mutants) + ", mutating #" + \
              args['--mutation'])
        mutation(int(args['--mutation']), files, asts, mutation_matrix,
        config["runner"], config["backup_folder"], config["report"], True)
    else:
        if all_mutants < config["mutants"]:
            print("Not enough possibilites to create " + str(config["mutants"]) + \
                  "only " + str(all_mutants) + " are available")
            config["mutants"] = all_mutants

        for i in range(0, config["mutants"]):
            mutation(random.randrange(all_mutants),
                     files, asts, mutation_matrix,
                     config["runner"], config["backup_folder"], config["report"])

if __name__ == '__main__':
        main()
